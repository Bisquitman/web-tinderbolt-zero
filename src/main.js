require("dotenv").config({ path: "../.env" });

// Server
const express = require("express");
const app = express();
const port = process.env.PORT || 4000;

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});
// Server

const { HtmlTelegramBot, userInfoToString } = require("./bot");
const ChatGptService = require("./gpt");

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GPT_TOKEN = process.env.GPT_TOKEN;

class MyTelegramBot extends HtmlTelegramBot {
  constructor(token) {
    super(token);
    this.mode = null;
    this.list = [];
    this.user = {};
    this.count = 0;
  }

  async start() {
    this.mode = "main";
    const text = this.loadMessage("main");
    await this.sendImage("main");
    await this.sendText(text);

    //   Add menu
    await this.showMainMenu({
      "/start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
      "/profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
      "/opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
      "/message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
      "/date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
      "/gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
      "/html": "–î–µ–º–æ HTML",
    });
  }

  async html() {
    await this.sendHTML('<h3 style="color: #1558b0;"> –ü—Ä–∏–≤–µ—Ç! </h3>');
    const html = this.loadHtml("main");
    await this.sendHTML(html, { theme: "dark" });
  }

  async gpt() {
    this.mode = "gpt";
    const text = this.loadMessage("gpt");
    await this.sendImage("gpt");
    await this.sendText(text);
  }

  async gptDialog(msg) {
    const text = msg.text;
    const myMessage = await this.sendText("–î—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...");
    const answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:", text);
    await this.editText(myMessage, answer);
  }

  async date() {
    this.mode = "date";
    const text = this.loadMessage("date");
    await this.sendImage("date");
    await this.sendTextButtons(text, {
      date_grande: "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
      date_robbie: "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
      date_zendaya: "–ó–µ–Ω–¥–µ—è",
      date_gosling: "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
      date_hardy: "–¢–æ–º –•–∞—Ä–¥–∏",
    });
  }

  async dateButton(callbackQuery) {
    const query = callbackQuery.data;
    await this.sendImage(query);
    await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:");
    const prompt = this.loadPrompt(query);
    chatgpt.setPrompt(prompt);
  }

  async dateDialog(msg) {
    const text = msg.text;
    const myMessage = await this.sendText("–ü–µ—á–∞—Ç–∞–µ—Ç...");
    const answer = await chatgpt.addMessage(text);
    // await this.sendText(answer);
    await this.editText(myMessage, answer);
  }

  async message() {
    this.mode = "message";
    this.list = [];
    const text = this.loadMessage("message");
    await this.sendImage("message");
    await this.sendTextButtons(text, {
      message_next: "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      message_date: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
    });
  }

  async messageButton(callbackQuery) {
    const query = callbackQuery.data;
    const prompt = this.loadPrompt(query);
    const userChatHistory = this.list.join("\n\n");
    const myMessage = await this.sendText("–î—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...");
    const answer = await chatgpt.sendQuestion(prompt, userChatHistory);
    await this.editText(myMessage, answer);
  }

  async messageDialog(msg) {
    const text = msg.text;
    this.list.push(text);
  }

  async profile() {
    this.mode = "profile";
    const text = this.loadMessage("profile");
    await this.sendImage("profile");
    await this.sendText(text);

    this.user = {};
    this.count = 0;
    await this.sendText("1. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
  }

  async profileDialog(msg) {
    const text = msg.text;
    this.count += 1;

    if (this.count === 1) {
      this.user["age"] = text;
      await this.sendText("2. –ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?");
    }

    if (this.count === 2) {
      this.user["occupation"] = text;
      await this.sendText("3. –£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?");
    }

    if (this.count === 3) {
      this.user["hobby"] = text;
      await this.sendText("4. –ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?");
    }

    if (this.count === 4) {
      this.user["annoys"] = text;
      await this.sendText("5. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
    }

    if (this.count === 5) {
      this.user["goals"] = text;

      const prompt = this.loadPrompt("profile");
      const info = userInfoToString(this.user);

      const myMessage = await this.sendText("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...");
      const answer = await chatgpt.sendQuestion(prompt, info);
      await this.editText(myMessage, answer);
    }
  }

  async opener() {
    this.mode = "opener";
    const text = this.loadMessage("opener");
    await this.sendImage("opener");
    await this.sendText(text);

    this.user = {};
    this.count = 0;
    await this.sendText("1. –ò–º—è –¥–µ–≤—É—à–∫–∏?");
  }

  async openerDialog(msg) {
    const text = msg.text;
    this.count += 1;

    if (this.count === 1) {
      this.user["name"] = text;
      await this.sendText("2. –°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?");
    }

    if (this.count === 2) {
      this.user["age"] = text;
      await this.sendText("3. –û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10.");
    }

    if (this.count === 3) {
      this.user["handsome"] = text;
      await this.sendText("4. –ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?");
    }

    if (this.count === 4) {
      this.user["occupation"] = text;
      await this.sendText("5. –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
    }

    if (this.count === 5) {
      this.user["goals"] = text;

      const prompt = this.loadPrompt("opener");
      const info = userInfoToString(this.user);

      const myMessage = await this.sendText("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à opener...");
      const answer = await chatgpt.sendQuestion(prompt, info);
      await this.editText(myMessage, answer);
    }
  }

  async hello(msg) {
    if (this.mode === "gpt") await this.gptDialog(msg);
    else if (this.mode === "date") await this.dateDialog(msg);
    else if (this.mode === "message") await this.messageDialog(msg);
    else if (this.mode === "profile") await this.profileDialog(msg);
    else if (this.mode === "opener") await this.openerDialog(msg);
    else {
      const text = msg.text;
      await this.sendText(`<b>–ü—Ä–∏–≤–µ—Ç!</b>`);
      await this.sendText("<i>–ö–∞–∫ –¥–µ–ª–∞?</i>");
      await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`);
      await this.sendImage("avatar_main");
      await this.sendTextButtons("–ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–∞ –≤ Telegram?", {
        theme_light: "–°–≤–µ—Ç–ª–∞—è",
        theme_dark: "–¢—ë–º–Ω–∞—è",
      });
    }
  }

  async helloButton(callbackQuery) {
    const query = callbackQuery.data;

    if (query === "theme_light") {
      await this.sendText(`–í–∞—à–∞ —Ç–µ–º–∞ –°–≤–µ—Ç–ª–∞—è`);
    } else if (query === "theme_dark") {
      await this.sendText(`–í–∞—à–∞ —Ç–µ–º–∞ –¢—ë–º–Ω–∞—è`);
    }
  }
}

const chatgpt = new ChatGptService(GPT_TOKEN);
const bot = new MyTelegramBot(TELEGRAM_BOT_TOKEN);

bot.onCommand(/\/start/, bot.start); //  Command  /start
bot.onCommand(/\/html/, bot.html); //  Command  /html
bot.onCommand(/\/gpt/, bot.gpt); //  Command  /gpt
bot.onCommand(/\/date/, bot.date); //  Command  /date
bot.onCommand(/\/message/, bot.message); //  Command  /message
bot.onCommand(/\/profile/, bot.profile); //  Command  /profile
bot.onCommand(/\/opener/, bot.opener); //  Command  /opener

bot.onTextMessage(bot.hello);
bot.onButtonCallback(/^date_.*/, bot.dateButton); // any string started with date_
bot.onButtonCallback(/^message_.*/, bot.messageButton); // any string started with message_
bot.onButtonCallback(/^.*/, bot.helloButton); // any string
